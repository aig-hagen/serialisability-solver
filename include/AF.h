#ifndef ARGU_FRAMEWORK_H
#define ARGU_FRAMEWORK_H

#include <vector>
#include <unordered_map>
#include <string>
#include <cstdint>

enum task { DC, DS, SE, EE, CE, UNKNOWN_TASK };
enum semantics { IT, UC, PR, GR, UNKNOWN_SEM };

/* The following hash_combine function is from the Boost software library
 * and is subject to the following licence.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

template <class T>
inline void hash_combine(std::size_t & seed, const T & v)
{
  std::hash<T> hasher;
  seed ^= hasher(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

namespace std
{
  template<typename S, typename T> struct hash<pair<S, T>>
  {
	inline size_t operator()(const pair<S, T> & v) const
	{
	  size_t seed = 0;
	  ::hash_combine(seed, v.first);
	  ::hash_combine(seed, v.second);
	  return seed;
	}
  };
}

class AF {
public:

AF(int num_args);

semantics sem;
std::string solver_path;


int args;

std::vector<std::vector<int>>* attacked;
std::vector<std::vector<int>>* attackers;
std::vector<bool>* unattacked;
std::vector<bool>* self_attack;
std::unordered_map<std::pair<int,int>,bool>* att_exists;
std::unordered_map<std::pair<int,int>,bool>* symmetric_attack;

bool* self;


int num_active;
std::vector<int> active_args;
std::vector<bool> is_active;

std::vector<int> accepted_var;
std::vector<int> rejected_var;


void set_arguments(int num_args);
void add_attack(std::pair<int,int> att);

void initialize_attackers();
void initialize_vars();

void set_solver_path(std::string path);

};

#endif